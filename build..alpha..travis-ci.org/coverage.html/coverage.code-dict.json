{"/home/travis/build/npmtest/node-npmtest-grunt-responsive-videos/test.js":"/* istanbul instrument in package npmtest_grunt_responsive_videos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-responsive-videos/lib.npmtest_grunt_responsive_videos.js":"/* istanbul instrument in package npmtest_grunt_responsive_videos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_responsive_videos = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_responsive_videos = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-responsive-videos/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-responsive-videos && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_responsive_videos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_responsive_videos\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_responsive_videos.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_responsive_videos.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_responsive_videos.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_responsive_videos.__dirname + '/lib.npmtest_grunt_responsive_videos.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-responsive-videos/node_modules/grunt-responsive-videos/Gruntfile.js":"/*\n * grunt-responsive-videos\n * https://github.com/sjwilliams/grunt-responsive-videos\n *\n * Copyright (c) 2013 Josh Williams\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/*.js',\n        '<%= nodeunit.tests %>',\n      ],\n      options: {\n        jshintrc: '.jshintrc',\n      },\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['tmp'],\n    },\n\n    // Configuration to be run (and then tested).\n    responsive_videos: {\n      default_options: {\n        options: {\n        },\n        files: {\n          'tmp/default_options/big_buck_bunny.mov': 'test/assets/big_buck_bunny.mov',\n        },\n      },\n      custom_options: {\n        options: {\n          sizes: [{\n            width: 240,\n            poster: true\n          }],\n          encodes:[{\n            webm: [\n              {'-vcodec': 'libvpx'},\n              {'-acodec': 'libvorbis'},\n              {'-crf': '15'},\n              {'-q:a': '80'}\n            ]\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['**.{mp4,mov}'],\n          cwd: 'test/assets/',\n          dest: 'tmp/custom_options/'\n        }],\n      },\n      filter_options: {\n        options: {\n          sizes:[{\n            width: 640,\n            name: 'filtered',\n            filter: 'scale=640:trunc(ow/a/2)*2,crop=360:360:140:0',\n            poster: true\n          }],\n          encodes:[{\n            mp4: [\n              {'-vcodec':'libx264'},\n              {'-acodec': 'libfaac'},\n              {'-pix_fmt': 'yuv420p'},\n              {'-q:v': '4'},\n              {'-q:a': '100'},\n              {'-threads': '0'}\n            ]\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['cappadocia.mp4'],\n          cwd: 'test/assets/',\n          dest: 'tmp/filter_options/'\n        }],\n      },\n      poster_options: {\n        options: {\n          sizes: [{\n            width: 200,\n            name: 'poster_boolean',\n            poster: true\n          },{\n            width: 200,\n            name: 'poster_object_fastseek',\n            poster: {\n              fastseek: '1'\n            }\n          },{\n            width: 200,\n            name: 'poster_string_fastseek',\n            poster: {\n              fastseek: '1'\n            }\n          },{\n            width: 200,\n            name: 'poster_object_accurateseek',\n            poster: {\n              accurateseek: '1'\n            }\n          },{\n            width: 200,\n            name: 'poster_object_accurateseek_altstring',\n            poster: {\n              accurateseek: '00:00:01'\n            }\n          }\n          ],\n          encodes:[{\n            mp4: [\n              {'-vcodec':'libx264'},\n              {'-acodec': 'libfaac'},\n              {'-pix_fmt': 'yuv420p'},\n              {'-q:v': '4'},\n              {'-q:a': '100'},\n              {'-threads': '0'}\n            ]\n          }]\n        },\n        files: [{\n          expand: true,\n          src: ['cappadocia.mp4'],\n          cwd: 'test/assets/',\n          dest: 'tmp/poster_options/'\n        }],\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/*_test.js'],\n    },\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', ['clean', 'responsive_videos', 'nodeunit']);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-responsive-videos/node_modules/grunt-responsive-videos/tasks/responsive_videos.js":"/*\n * grunt-responsive-videos\n * https://github.com/sjwilliams/grunt-responsive-videos\n *\n * Based on the very handy grunt-responsive-images\n * by andismith: https://github.com/andismith/grunt-responsive-images\n * and ffmpeg-node by xonecase: https://github.com/xonecas/ffmpeg-node\n *\n * Copyright (c) 2013 Josh Williams\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar _ = require('underscore'),\n    async = require('async'),\n    path = require('path'),\n    ffmpeg = require('ffmpeg-node');\n\nmodule.exports = function(grunt) {\n\n    var DEFAULT_OPTIONS = {\n        separator: '-',\n        sizes: [{\n            name: 'small',\n            width: 320,\n            filter: '',\n            poster: true\n        },{\n            name: 'large',\n            width: 640,\n            filter: '',\n            poster: true\n        }\n        ],\n        encodes:[{\n            webm: [\n               {'-vcodec': 'libvpx'},\n               {'-acodec': 'libvorbis'},\n               {'-q:a': '100'},\n               {'-quality': 'good'},\n               {'-cpu-used': '0'},\n               {'-b:v': '500k'},\n               {'-qmax': '42'},\n               {'-maxrate': '500k'},\n               {'-bufsize': '1000k'},\n               {'-threads': '0'}\n            ],\n            mp4: [\n                {'-vcodec':'libx264'},\n                {'-acodec': 'libfaac'},\n                {'-pix_fmt': 'yuv420p'},\n                {'-q:v': '4'},\n                {'-q:a': '100'},\n                {'-threads': '0'}\n            ]\n        }],\n        additionalFlags:[]\n    };\n\n\n    // check if there are any items in our array\n    function isValidArray(obj) {\n        return (_.isArray(obj) && obj.length > 0);\n    }\n\n\n    // check whether we've been given any valid size values\n    function isValidSize(obj) {\n        return (_.isNumber(obj.width) && obj.width%2===0);\n    }\n\n\n    // create a name to suffix to our file.\n    function getName(name, width, separator) {\n\n        // handle empty separator as no separator\n        if (typeof separator === 'undefined') {\n            separator = '';\n        }\n\n        if (name) {\n            return separator + name;\n        } else {\n            return separator + width;\n        }\n    }\n\n    // if a file exist, delete it.\n    // otherwise ffmpeg will fail\n    function deleteFile(path) {\n        if (grunt.file.exists(path)) {\n            grunt.file.delete(path);\n        }\n    }\n\n\n    // Build filter graph flag, giving preference to a custom\n    // filter. If none, construct the filter with the given width.\n    // http://ffmpeg.org/ffmpeg-filters.html#Filtering-Introduction\n    function getFilterGraphFlags(sizeObj) {\n        if (sizeObj.filter && typeof sizeObj.filter === 'string') {\n            return sizeObj.filter;\n        } else {\n            return 'scale='+sizeObj.width+':trunc(ow/a/2)*2';\n        }\n    }\n\n    grunt.registerMultiTask('responsive_videos', 'Videos at various responsive sizes', function() {\n        var that = this;\n\n        // Merge task-specific and/or target-specific options with these defaults.\n        var done = this.async();\n        var series = [];\n        var options = this.options(DEFAULT_OPTIONS);\n        var sizeTally = {};  // track number of files per size\n        var encodeTally = {}; // track number of files by codec\n        var count = 0; // track total number of files\n\n        if (!isValidArray(options.sizes)) {\n            return grunt.fail.warn('No sizes have been defined.');\n        }\n\n        // build encode settings for each size\n        options.sizes.forEach(function(size) {\n\n            if (!isValidSize(size)) {\n                return grunt.fail.warn('Width is invalid. It must be an integer and divisible by 2 (libx264 requirement)');\n            }\n\n            // create a name suffix for our image\n            size.name = getName(size.name, size.width, options.separator);\n\n            sizeTally[size.name] = 0;\n\n            // build encode settings for each input file\n            that.files.forEach(function(f) {\n                var extName = path.extname(f.dest),\n                    srcPath = f.src[0],\n                    baseName = path.basename(srcPath, extName), // filename without extension\n                    dirName = path.dirname(f.dest),\n                    dstPath = path.join(dirName, baseName + size.name),\n                    posterPath = dstPath + '.jpg';\n\n                // more than 1 source.\n                if (f.src.length > 1) {\n                    return grunt.fail.warn('Unable to encode more than one video in compact or files object format.\\n' +\n                        'For multiple files please use the files array format.\\nSee http://gruntjs.com/configuring-tasks');\n                }\n\n                // Make directory if it doesn't exist.\n                if (!grunt.file.isDir(dirName)) {\n                    grunt.file.mkdir(dirName);\n                }\n\n                // determine which type of poster to create for\n                // the given video size and related options.\n                //\n                // The default will be to use the first frame, but also options to 'fastseek'\n                // and 'accurateseek' to a specific portion of the video\n                //\n                // Based on:\n                // https://github.com/sjwilliams/grunt-responsive-videos/issues/3#issuecomment-31206990\n                // https://trac.ffmpeg.org/wiki/Seeking%20with%20FFmpeg\n                if (size.poster) {\n                    deleteFile(posterPath);\n\n                    series.push(function(callback){\n                        var flags = [];\n                        var posterConfigType = typeof size.poster;\n                        var seektime;\n\n                        // accurateseek object contains an 'accurateseek' property\n                        if (posterConfigType === 'object' && typeof size.poster.accurateseek === 'string') {\n\n                            // -ss param after input\n                            flags.push('-i', srcPath);\n                            flags.push('-ss', size.poster.accurateseek);\n\n                        // string is assumed to be format '00:02:00' and will fast seek.\n                        // if object with fastseek propery, same settings\n                        } else if (posterConfigType === 'string' || (posterConfigType === 'object' && typeof size.poster.fastseek === 'string')) {\n                            seektime = (posterConfigType === 'string') ? size.poster : size.poster.fastseek;\n\n                            // -ss param before input\n                            flags.push('-ss', seektime);\n                            flags.push('-i', srcPath);\n\n                         // boolean true or something configured wrong.\n                         // just grab the first frame. warn if misconfigured.\n                        } else {\n                            if (posterConfigType !== 'boolean') {\n                                grunt.log.writeln('Poster option invalid. Using first frame.');\n                            }\n                            flags.push('-i', srcPath);\n                        }\n\n                        flags.push('-vframes', '1'); //grab only one frame\n                        flags.push('-vf', getFilterGraphFlags(size));\n                        flags.push(posterPath);\n                        grunt.log.debug('ffmpeg ' + flags.join(' '));\n                        ffmpeg.exec(flags, function() {\n                            grunt.verbose.ok('Responsive Video: ' + srcPath + ' now ' + posterPath);\n                            return callback();\n                        });\n                    });\n                }\n\n                // generate encode settings for each output encode type\n                options.encodes.forEach(function(encodeSettings){\n                    _.each(encodeSettings, function(codecSettings, codecName){\n                        var outPath = dstPath + '.' + codecName;\n\n                        if (encodeTally[codecName]) {\n                            encodeTally[codecName]++;\n                        } else {\n                            encodeTally[codecName] = 1;\n                        }\n\n                        // build up flags array ffmpeg-node expects.\n                        // ex: ['-i', srcPath, '-vcodec', 'libx264', '-acodec', 'libfaac', '-pix_fmt', 'yuv420p', '-q:v', '4',  '-q:a', '100', '-threads', '0', dstPath]\n                        var flags = [];\n\n                        // input file first\n                        flags.push('-i', srcPath);\n\n                        // given settings for this encode\n                        _.each(codecSettings, function(codecSetting){\n                            for (var key in codecSetting){\n                                flags.push(key,codecSetting[key]);\n                            }\n                        });\n\n                        // global, encode-independent settings\n                        _.each(options.additionalFlags, function(flag){\n                            for (var key in flag){\n                                flags.push(key,flag[key]);\n                            }\n                        });\n\n                        // set size with given width or custom filtergraph\n                        flags.push('-vf', getFilterGraphFlags(size));\n\n                        // output file\n                        flags.push(outPath);\n\n                        // delete older versions\n                        deleteFile(outPath);\n\n                        // update tallies\n                        sizeTally[size.name]++;\n                        count++;\n\n                        // queue encode jobs\n                        series.push(function(callback){\n                            grunt.log.debug('ffmpeg ' + flags.join(' '));\n                            ffmpeg.exec(flags, function() {\n                                grunt.verbose.ok('Responsive Video: ' + srcPath + ' now ' + outPath);\n                                return callback();\n                            });\n                        });\n\n                    });\n\n                    series.push(function(callback) {\n                        if (sizeTally[size.name]) {\n                            grunt.log.writeln('Created ' + sizeTally[size.name].toString().cyan + ' files for size ' + size.name);\n                        }\n                        return callback();\n                    });\n                });\n            });\n        });\n\n        grunt.log.writeln('Starting ' + count.toString().cyan + ' encodes jobs.');\n\n        // run encode jobs async\n        async.series(series, done);\n    });\n};\n"}